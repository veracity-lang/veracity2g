commutativity {
    {f1(arr)}, {f2(arr,x)}: (0 > arr[0] && !(1 == x) || 1 == x);
    {f3(a,b,e)}, {f4(a,d)}: (!(d == e) && !(a == b) || a == b);
    {f1(arr)}, {f3(a,b,e)}: (!(0 == e));
    {f2(arr,x)}, {f4(a,d)}: (!(a > d) && !(d == a) && !(1 == x) || !(0 == d) && a > d && !(d == a) && !(1 == x) || d == a && !(1 == x) || 1 == x)
}

int main(int argc, string[] argv) {
    int a = 0;
    int b = 0;
    int c = 10;
    int d = 0;
    int n = int_of_string(argv[1]);
    int[] arr = new int[20000];
 
    int x = 1;
    
    int e = c % n;
    arr[0] = 69;

    f1(arr):{
        busy_wait(n);
        mutex_lock(0);
        arr[0] = arr[0] + 1;
        mutex_unlock(0);
    }
    
    a = a + 5;
    b = b + 10;
    
    int i = 0;
    while (i < 1000) {
        c = a + b + i;
        
        f2(arr,x):{
            mutex_lock(0);
            if(arr[0] > 0) {
                arr[0] = arr[0] * x;
            }
            mutex_unlock(0);
            busy_wait(n);
        }
        
        d = c * 2;
        i = i + 1;
    }
    
    e = (c + 1) % n;
    
    int j = 0;
    while (j < 2000) {
        a = a + j;
        
        f3(a,b,e): {
            busy_wait(n);
            mutex_lock(0);
            a = a + 1;
            arr[e] = b;
            a = a - 1;
            mutex_unlock(0);
        }
        
        b = b + j;
        j = j + 1;
    }
    
    arr[1] = c + d;
    
  
    f4(a,d): {
        print(string_of_int(d));
        arr[d] = a;
        busy_wait(n);
    }
    
    return 0;
}