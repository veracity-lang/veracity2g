commutativity {
   {vote(voterID_1,proposal_1)}, {vote(voterID_2,proposal_2)}: (voterID_1 != voterID_2)
}

/* Workload Config */
int[] taskID_to_voterID = new int[] { 1, 1, 2, 2, 1, 2, 3, 1, 2}; /* mix of which voterID */
int[] taskID_to_proposal  = new int[] { 1, 2, 1, 2, 1, 2, 1, 2, 1}; /* mix of which weight */

hashtable[int,int] voter_weight = new hashtable_seq[int,int];
hashtable[int,int] voter_voted = new hashtable_seq[int,int];
hashtable[int,int] voter_vote = new hashtable_seq[int,int];
int r_vote = 0;

int main(int argc, string[] argv) {
    int scalingfactor = int_of_string(argv[1]);

    int i = 0;
    while(i<scalingfactor) {
    /* https://docs.soliditylang.org/en/latest/solidity-by-example.html */
       int voterID = taskID_to_voterID[i];
       int proposal = taskID_to_proposal[i];
      i = i + 1;
       vote(voterID,proposal):{
            r_vote = 0;
            int weight = ht_get(voter_weight,voterID);
            if (weight != 0) {
                r_vote = -1;
            } else {
                int voted = ht_get(voter_voted,voterID);
                if(voted == 1) {
                    r_vote = -1;
                } else {
                    ht_put(voter_voted,voterID,1);
                    ht_put(voter_vote,voterID,proposal);
                    int curVotes = ht_get(proposals,proposal);
                    ht_put(proposals,proposal,curVotes + weight);
                }
            }
            /*
            Voter storage sender = voters[msg.sender];
            require(sender.weight != 0, "Has no right to vote");
            require(!sender.voted, "Already voted.");
            sender.voted = true;
            sender.vote = proposal;

            // If `proposal` is out of the range of the array,
            // this will throw automatically and revert all
            // changes.
            proposals[proposal].voteCount += sender.weight;
            */
        }
    }
    
    return 1;
}
